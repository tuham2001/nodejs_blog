<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        html {
            color: #333;
            font-size: 62.5%;
            font-family: "Open Sans", sans-serif;
        }

        .main {
            background-image: url(https://cdn.fullstack.edu.vn/f8-learning/manual_uploads/f8_bg_auth_1366.png);
            min-height: 100vh;
            display: flex;
            justify-content: center;
        }

        .form {
            width: 360px;
            min-height: 100px;
            padding: 32px 24px;
            text-align: center;
            background: #fff;
            border-radius: 2px;
            margin: 24px;
            align-self: center;
            box-shadow: 0 2px 5px 0 rgba(51, 62, 73, 0.1);
        }

        .form .heading {
            font-size: 2rem;
        }

        .form .desc {
            text-align: center;
            color: #636d77;
            font-size: 1.6rem;
            font-weight: lighter;
            line-height: 2.4rem;
            margin-top: 16px;
            font-weight: 300;
        }

        .form-group {
            display: flex;
            margin-bottom: 16px;
            flex-direction: column;
        }

        .form-label,
        .form-message {
            text-align: left;
        }

        .form-label {
            font-weight: 700;
            padding-bottom: 6px;
            line-height: 1.8rem;
            font-size: 1.4rem;
        }

        .form-control {
            height: 40px;
            padding: 8px 12px;
            border: 1px solid #b3b3b3;
            border-radius: 3px;
            outline: none;
            font-size: 1.4rem;
        }

        .form-control:hover {
            border-color: #1dbfaf;
        }

        .form-group.invalid .form-control {
            border-color: #f33a58;
        }

        .form-group.invalid .form-message {
            color: #f33a58;
        }

        .form-message {
            font-size: 1.2rem;
            line-height: 1.6rem;
            padding: 4px 0 0;
        }

        .form-submit {
            outline: none;
            background-color: #1dbfaf;
            margin-top: 12px;
            padding: 12px 16px;
            font-weight: 600;
            color: #fff;
            border: none;
            width: 100%;
            font-size: 14px;
            border-radius: 8px;
            cursor: pointer;
        }

        .form-submit:hover {
            background-color: #1ac7b6;
        }

        .spacer {
            margin-top: 36px;
        }
    </style>
</head>

<body>
    <div class="main">

        <form action="/accounts/saveRegister" method="POST" class="form" id="form-1">
            <a href="/">
                <h3 class="heading">PRO</h3>
            </a>
            <p class="desc">Đăng nhập tài khoản PRO ❤️</p>
            {{!-- {{#if err}}
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="close">
                    <span aria-hidden="true">&times;</span>
                </button>
                {{err}}
            </div>
            {{err}} --}}
            <div class="spacer"></div>

            <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <input id="email" name="email" type="email" placeholder="Email" class="form-control">
                <span class="form-message"></span>
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Mật khẩu</label>
                <input id="password" name="password" type="password" placeholder="Nhập mật khẩu" class="form-control">
                <span class="form-message"></span>
            </div>

            <button class="form-submit">Đăng nhập</button>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>


    <script>
        function Validator(options) {

            function getParent(element, selector) {
                while (element.parentElement) {
                    if (element.parentElement.matches(selector)) {
                        return element.parentElement
                    }
                    element = element.parentElement
                }
            }

            var selectorRules = {}

            // Hàm thực hiện validate
            function validate(inputElement, rule) {
                var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector)
                var errorMessage

                //Lấy ra các rules của selector
                var rules = selectorRules[rule.selector]

                //Lặp qua từng rules và kiểm tra(checked)
                //Nếu có lỗi thì dừng việc ktra
                for (var i = 0; i < rules.length; i++) {
                    errorMessage = rules[i](inputElement.value)
                    if (errorMessage) break
                }

                if (errorMessage) {
                    errorElement.innerText = errorMessage
                    getParent(inputElement, options.formGroupSelector).classList.add('invalid')
                } else {
                    errorElement.innerText = ''
                    getParent(inputElement, options.formGroupSelector).classList.remove('invalid')
                }

                return !errorMessage
            }

            // Lấy element của form cần validate
            var formElement = document.querySelector(options.form)

            if (formElement) {
                //khi submit form
                formElement.onsubmit = function (e) {
                    e.preventDefault()

                    var isFormValid = true

                    //Lăp qua từng rules và validate
                    options.rules.forEach(function (rule) {
                        var inputElement = formElement.querySelector(rule.selector)
                        var isValid = validate(inputElement, rule)
                        if (!isValid) {
                            isFormValid = false
                        }
                    })



                    if (isFormValid) {
                        //Trường hợp submit với js
                        if (typeof options.onSubmit === 'function') {
                            var enableInputs = formElement.querySelectorAll('[name]')
                            var formValues = Array.from(enableInputs).reduce(function (values, input) {
                                values[input.name] = input.value
                                return values
                            }, {})
                            options.onSubmit(formValues)
                        }
                        //Trường hợp submit với hành vi mặc định 
                        else {
                            formElement.submit()
                        }
                    }
                }

                // Lặp qua mỗi rule và xử lý (lắng nghe sự kiện blur, input ,...)
                options.rules.forEach(function (rule) {

                    //Lưu lại các rules trong mỗi input
                    if (Array.isArray(selectorRules[rule.selector])) {
                        selectorRules[rule.selector].push(rule.test)
                    } else {
                        selectorRules[rule.selector] = [rule.test]
                    }
                    // selectorRules[rule.selector] = rule.test

                    var inputElement = formElement.querySelector(rule.selector)
                    if (inputElement) {
                        // Xử lý trường hợp blur khỏi input
                        inputElement.onblur = function () {
                            validate(inputElement, rule)

                        }
                        // Xử lý mỗi khi người dùng nhập vào input
                        inputElement.oninput = function () {
                            var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector)
                            errorElement.innerText = ''
                            getParent(inputElement, options.formGroupSelector).classList.remove('invalid')
                        }
                    }
                })

            }
        }
        Validator.isEmail = function (selector, message) {
            return {
                selector: selector,
                test: function (value) {
                    var regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/
                    return regex.test(value) ? undefined : message || 'Trường này phải là email'

                }
            }

        }
        Validator.minLength = function (selector, min, message) {
            return {
                selector: selector,
                test: function (value) {
                    return value.length >= min ? undefined : message || `Vui lòng nhập tối thiệu ${min} kí tự`
                }
            }
        }
    </script>
    <script>
        Validator({
            form: '#form-1',
            formGroupSelector: '.form-group',
            errorSelector: '.form-message',
            rules: [
                Validator.isEmail('#email'),
                Validator.minLength('#password', 6),
            ],
            onSubmit: function (data) {
                console.log(data)
            }
        })
    </script>


</body>

</html>